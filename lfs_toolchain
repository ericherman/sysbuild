#!/bin/bash
#
# Copyright (C) 2010-2011 Eric Herman
# license: http://www.gnu.org/licenses/lgpl-2.1.html
#
# initially thrown together by Eric Herman on 2010 December 19
#
# much of this is simply automating Linux From Scratch
#  http://www.linuxfromscratch.org/lfs/
#   Copyright (C) 1999-2010 Gerard Beekmans
#   license: Attribution-NonCommercial-ShareAlike 2.0
#
# a bit is based upon Cross-Compiled Linux From Scratch
#  http://cross-lfs.org/
#   Copyright (C) 2005-2010 Joe Ciccone, Jim Gifford & Ryan Oliver
#   license: http://www.opencontent.org/openpub/
# which is based upon Based on LFS, as well.
#
# some inspiration was from DIY Linux
#  http://diy-linux.org/
#   Copyright (C) 2004-2008, 2009 Greg Schafer
#   license: http://www.gnu.org/licenses/fdl.html
#

export TGT=i686
#export TGT=x86_64

if [ $TGT = "i686" ]
then
	export CROSS_TARGET="i686-lfs-linux-gnu"
	export KERNEL_ARCH="ARCH=i386"
elif [ $TGT = "x86_64" ]
then
	export CROSS_TARGET="x86_64-lfs-linux-gnu"
	export KERNEL_ARCH="ARCH=x86_64"
else
	echo "unknown target: '$TGT'"
	exit 1
fi

export CROSS_HOST="$(echo ${MACHTYPE} | \
     sed "s/$(echo ${MACHTYPE} | \
     cut -d- -f2)/cross/")"

export SYSROOT="/lfs"
export TOOLS="/tools"
export TOOLCHAIN_BUILD="/lfs/build"
export SOURCES=/lfs/sources/tarballs
export PATCHES=/lfs/sources/patches

export PATH=${TOOLS}/bin:${PATH}
export LC_ALL=POSIX
#export MAKEFLAGS='-j 10'

LINUX="linux-2.6.37.2.tar.bz2"
GMP="gmp-5.0.1.tar.bz2"
MPFR="mpfr-3.0.0.tar.xz"
MPC="mpc-0.8.2.tar.gz"
BINUTILS="binutils-2.21.tar.bz2"
LIBC="glibc-2.13.tar.xz"
#LIBC="eglibc-2.12-r12509.tar.bz2"
GCC="gcc-4.5.2.tar.bz2"

# TODO convert to using the full sysroot method and eliminate the need for
#      /tools symlinks in the root directory to the corresponding $SYSROOT
#      directory so a non-root user may build a toolchain entirely in their
#      /home directory or perhaps in /tmp



cat <<END_OF_MSG
CROSS_TARGET=${CROSS_TARGET}
KERNEL_ARCH=$KERNEL_ARCH
CROSS_HOST=${CROSS_HOST}

LINUX=$LINUX
BINUTILS=$BINUTILS
LIBC=$LIBC
GCC=$GCC
GMP=$GMP
MPFR=$MPFR
MPC=$MPC
PPL=$PPL
CLOOGPPL=$CLOOGPPL

TOOLS=${TOOLS}
TOOLCHAIN_BUILD=${TOOLCHAIN_BUILD}
SOURCES=${SOURCES}
PATCHES=${PATCHES}
PATH=${PATH}
LC_ALL=${LC_ALL}
END_OF_MSG

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                  CROSSTOOLCHAIN BUILD BEGINS
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

END_OF_MSG
echo "clearing ${TOOLS} and ${TOOLCHAIN_BUILD}"
rm -rf ${TOOLS}/*
rm -rf ${TOOLCHAIN_BUILD}/*
mkdir -v ${TOOLS}/lib
if [ $TGT = "x86_64" ]
then
ln -sv lib ${TOOLS}/lib64
fi
mkdir -p ${TOOLCHAIN_BUILD}
pushd ${TOOLCHAIN_BUILD}
echo ""
echo "CFLAGS and CXXFLAGS must not be set during the building of cross-tools"
unset CFLAGS
unset CXXFLAGS
echo "CFLAGS=$CFLAGS";
echo "CXXFLAGS=$CXXFLAGS"
echo "PWD: `pwd`";

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Cross Binutils

    $BINUTILS
        It is important that Binutils be compiled before libc and
        GCC both (e)Glibc and GCC perform various tests on the
        available linker and assembler to determine which of
        their own features to enable
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$BINUTILS &&
pushd binutils* &&
mkdir -v ../build-binutils &&
cd ../build-binutils &&
echo "CONFIGURE cross binutils" &&
../binutils*/configure \
    --target=${CROSS_TARGET} \
    --prefix=${TOOLS} \
    --disable-nls \
    --disable-werror &&
echo "MAKE cross binutils" &&
make &&
echo "INSTALL cross binutils" &&
make install &&
echo "YAY cross binutils" || exit $?
popd
echo "CLEANUP cross binutils"
pwd
rm -rf ${TOOLCHAIN_BUILD}/*
ls -l

echo ""
echo <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Cross GCC - Static
    $GCC
        http://gcc.gnu.org/install/prerequisites.html

    $MPFR
        Multiple-Precision Floating-point with correct Rounding
    $GMP
        GMP is a library for arithmetic on arbitrary precision
        integers, rational numbers, and floating-point numbers.
    $MPC
        Mpc is a C library for the arithmetic of complex numbers
        with arbitrarily high precision and correct rounding of
        the result. It is built upon and follows the same
        principles as Mpfr.
    WITHOUT PPL
        Parma Polyhedra Library (required by CLooG-PPL)
    WITHOUT CLOOGPPL
        CLooG-PPL is a library to generate code for scanning
        Z-polyhedra. In other words, it finds code that reaches
        each integral point of one or more parameterized
        polyhedra.
        GCC links with this library in order to enable the new
        loop generation code known as Graphite

 http://www.multiprecision.org/mpc/download/mpc-0.8.2.tar.gz
 http://www.cs.unipr.it/ppl/Download/ftp/releases/0.11/ppl-0.11.tar.bz2
 ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-ppl-0.15.10.tar.gz
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$GCC &&
mv -v gcc* gcc &&
pushd gcc &&
tar xf ${SOURCES}/$MPFR &&
mv -v mpfr-* mpfr &&
tar xf ${SOURCES}/$GMP &&
mv -v gmp-* gmp &&
tar xf ${SOURCES}/$MPC &&
mv -v mpc-* mpc &&
mkdir -v ../build-gcc &&
cd ../build-gcc &&
../gcc/configure \
    --target=$CROSS_TARGET \
    --prefix=${TOOLS} \
    --disable-nls \
    --disable-shared \
    --disable-multilib \
    --disable-decimal-float \
    --disable-threads \
    --disable-libmudflap \
    --disable-libssp \
    --disable-libgomp \
    --enable-languages=c \
    --with-gmp-include=$(pwd)/gmp \
    --with-gmp-lib=$(pwd)/gmp/.libs \
    --without-ppl \
    --without-cloog &&
echo "MAKE cross gcc" &&
make &&
echo "INSTALL cross gcc" &&
make install &&
echo  "NOTE:
  Using --disable-shared means that the libgcc_eh.a file
  isn't created and installed. The Glibc package depends on
  this library as it uses -lgcc_eh within its build system.
  This dependency can be satisfied by creating a symlink to
  libgcc.a, since that file will end up containing the objects
  normally contained in libgcc_eh.a" &&
ln -vs libgcc.a `$CROSS_TARGET-gcc -print-libgcc-file-name | \
    sed 's/libgcc/&_eh/'` &&
echo "YAY cross gcc" || exit $?
popd
echo "CLEANUP cross gcc"
pwd
rm -rf ${TOOLCHAIN_BUILD}/*
ls -l


echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Linux-Headers

    $LINUX
        The Linux kernel needs to expose an API for the system's
        libc to use. This is done by way of sanitizing various C
        header files that are shipped in the Linux kernel source
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$LINUX &&
pushd linux* &&
install -dv ${TOOLS}/include &&
echo "ensure the kernel source dir is clean" &&
make mrproper &&
echo "sanitize raw kernel headers for use by userspace programs" &&
make $KERNEL_ARCH headers_check &&
echo " ... and install" &&
make ${KERNEL_ARCH} INSTALL_HDR_PATH=dest headers_install &&
cp -rv dest/include/* ${TOOLS}/include &&
echo "YAY Linux-Headers" || exit $?
popd
echo "CLEANUP Linux-Headers"
pwd
rm -rf ${TOOLCHAIN_BUILD}/*
ls -l

echo ""
cat << END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 LIBC
    $LIBC
        The libc package contains the main C library.
        This library provides the basic routines for allocating
        memory, searching directories, opening and closing
        files, reading and writing files, string handling,
        pattern matching, arithmetic, and so on.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$LIBC &&
pushd *libc* &&
echo "PATCH libc" &&
patch -Np1 -i ${PATCHES}/glibc-2.13-gcc_fix-1.patch &&
echo " building LIBC outside of the source directory" &&
mkdir -v ../build-lib &&
cd ../build-lib || exit $?

if [ $TGT = "i686" ]
then
cat << END_OF_MSG
    Because Glibc no longer supports i386, its developers say to use the
    compiler flag -march=i486 when building it for x86 machines.

    There are several ways to accomplish that, but testing shows that the
    flag is best placed inside the build variable "CFLAGS".

    Instead of overriding completely what Glibc's internal build system
    uses for CFLAGS, append the new flag to the existing contents of
    CFLAGS by making use of the special file configparms.

    The -mtune=native flag is also necessary to reset a reasonable value
    for -mtune that is changed when setting -march.
END_OF_MSG
echo "CFLAGS += -march=i486 -mtune=native" > configparms
fi

 ../*libc*/configure \
    --prefix=${TOOLS} \
    --host=${CROSS_TARGET} \
    --build=${CROSS_HOST} \
    --disable-profile \
    --enable-add-ons \
    --enable-kernel=2.6.35 \
    --with-headers=${TOOLS}/include \
    libc_cv_forced_unwind=yes \
    libc_cv_c_cleanup=yes
echo "MAKE libc" &&
make &&
echo "INSTALL libc" &&
make install &&
echo "YAY libc" || exit $?
popd
echo "CLEANUP libc"
pwd
rm -rf ${TOOLCHAIN_BUILD}/*
ls -l

echo ""
cat << END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Adjusting the Toolchain

        Now that the temporary C libraries have been installed,
        additional tools compiled should be linked against these
        libraries. In order to accomplish this, the
        cross-compiler's specs file needs to be adjusted to point
        to the new dynamic linker in ${TOOLS}.

        This is done by dumping the compiler's “specs” file to a
        location where it will look for it by default. A simple
        sed substitution then alters the dynamic linker that GCC
        will use. The principle here is to find all references to
        the dynamic linker file in /lib or possibly /lib64 if the
        host system is 64-bit capable, and adjust them to point to
        the new location in ${TOOLS}.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
SPECS=`dirname $($CROSS_TARGET-gcc -print-libgcc-file-name)`/specs &&
$CROSS_TARGET-gcc -dumpspecs | sed \
  -e 's@/lib\(64\)\?/ld@/tools&@g' \
  -e "/^\*cpp:$/{n;s,$, -isystem /tools/include,}" > $SPECS &&
echo "New specs file is: $SPECS" &&
unset SPECS &&
echo "check compiling and linking" &&
echo 'main(){}' > dummy.c &&
${CROSS_TARGET}-gcc -B${TOOLS}/lib dummy.c &&
readelf -l a.out | grep ": ${TOOLS}" &&
rm -v dummy.c a.out &&
echo "YAY Adjusting the Toolchain" || exit $?

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 ${TOOLS} Binutils

    $BINUTILS
        The Binutils package contains a linker, an assembler,
        and other tools for handling object files.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$BINUTILS &&
pushd binutils* &&
mkdir -v ../build-binutils &&
cd ../build-binutils &&
echo "CONFIGURE cross binutils" &&
CC="$CROSS_TARGET-gcc -B${TOOLS}/lib/" \
   AR=$CROSS_TARGET-ar \
   RANLIB=$CROSS_TARGET-ranlib \
   ../binutils*/configure \
     --prefix=${TOOLS} \
     --disable-nls \
     --with-lib-path=${TOOLS}/lib
echo "MAKE binutils" &&
make &&
echo "INSTALL cross binutils" &&
make install &&
echo "Now prepare the linker for the 'Re-adjusting' later" &&
make -C ld clean &&
make -C ld LIB_PATH=/usr/lib:/lib &&
cp -v ld/ld-new ${TOOLS}/bin &&
echo "YAY binutils" || exit $?
popd
echo "CLEANUP binutils"
pwd
rm -rf ${TOOLCHAIN_BUILD}/*
ls -l

echo ""
echo <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 ${TOOLS} GCC
    $GCC
        The GCC package contains the GNU compiler collection,
        which includes the C and C++ compilers.

    http://gcc.gnu.org/install/prerequisites.html

    $MPFR
        Multiple-Precision Floating-point with correct Rounding
    $GMP
        GMP is a library for arithmetic on arbitrary precision
        integers, rational numbers, and floating-point numbers.
    $MPC
        Mpc is a C library for the arithmetic of complex numbers
        with arbitrarily high precision and correct rounding of
        the result. It is built upon and follows the same
        principles as Mpfr.
    WITHOUT PPL
        Parma Polyhedra Library (required by CLooG-PPL)
    WITHOUT CLOOGPPL
        CLooG-PPL is a library to generate code for scanning
        Z-polyhedra. In other words, it finds code that reaches
        each integral point of one or more parameterized
        polyhedra.
        GCC links with this library in order to enable the new
        loop generation code known as Graphite

 http://www.multiprecision.org/mpc/download/mpc-0.8.2.tar.gz
 http://www.cs.unipr.it/ppl/Download/ftp/releases/0.11/ppl-0.11.tar.bz2
 ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-ppl-0.15.10.tar.gz
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$GCC &&
mv -v gcc* gcc &&
pushd gcc &&
tar xf ${SOURCES}/$MPFR &&
mv -v mpfr-* mpfr &&
tar xf ${SOURCES}/$GMP &&
mv -v gmp-* gmp &&
tar xf ${SOURCES}/$MPC &&
mv -v mpc-* mpc &&

echo "PATCH ${TOOLS} GCC" &&
echo "Versions of GCC later than 4.3 will treat this build as if
    it were a relocated compiler and disallow searching for
    startfiles in the location specified by --prefix.
    Since this will not be a relocated compiler, and the
    startfiles in ${TOOLS} are crucial to building a working
    compiler linked to the libs in ${TOOLS}, the following
    patch which partially reverts GCC to its old behavior
        (yes, this is ugly)" &&
patch -Np1 -i ${PATCHES}/gcc-4.5.2-startfiles_fix-1.patch &&
echo "Under normal circumstances the GCC fixincludes script
    is run in order to fix potentially broken header files.
    As GCC-4.5.2 and Glibc-2.13 have already been installed
    at this point, and their respective header files are
    known to not require fixing, the fixincludes script is
    not required. In fact, running this script may actually
    pollute the build environment by installing fixed headers
    from the host system into GCC's private include directory.
    The running of the fixincludes script is suppressed:" &&
cp -v gcc/Makefile.in{,.orig} &&
sed 's@\./fixinc\.sh@-c true@' gcc/Makefile.in.orig > gcc/Makefile.in &&
echo " For x86 machines, a bootstrap build of GCC uses the
      -fomit-frame-pointer compiler flag. Non-bootstrap builds
    omit this flag by default, and the goal should be to
    produce a compiler that is exactly the same as if it were
    bootstrapped. The following sed command forces the build
    to use the flag" &&
cp -v gcc/Makefile.in{,.tmp} &&
sed 's/^T_CFLAGS =$/& -fomit-frame-pointer/' gcc/Makefile.in.tmp \
  > gcc/Makefile.in || exit $?;

echo "The following command will change the location of GCC's
     default dynamic linker to use the one installed in ${TOOLS}
     It also removes /usr/include from GCC's include search path.
     Doing this now rather than adjusting the specs file after
     installation ensures that the new dynamic linker is used
     during the actual build of GCC. That is, all of the binaries
     created during the build will link against the new Glibc." &&
for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
  -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_INCLUDE_DIR
#define STANDARD_INCLUDE_DIR 0
#define STANDARD_STARTFILE_PREFIX_1 ""
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

echo "In case the above seems hard to follow, let's break it down
    a bit.

    First we find all the files under the gcc/config directory that
    are named either linux.h, linux64.h or sysv4.h.

    For each file found, we copy it to a file of the same name but
    with an added suffix of '.orig'.

    Then the first sed expression prepends '${TOOLS}' to every
    instance of '/lib/ld', '/lib64/ld' or '/lib32/ld',
    while the second one replaces hard-coded instances of '/usr'.

    Then we add our define statements which alter the include search
    path and the default startfile prefix to the end of the file.

    Finally, we use touch to update the timestamp on the copied files.

    When used in conjunction with cp -u, this prevents unexpected
    changes to the original files in case the commands are
    inadvertently run twice." &&
echo "" &&
echo "" &&
if [ $TGT = "i686" ]
then
	echo "no need to unset multilibspec"
elif [ $TGT = "x86_64" ]
then
	echo "unset the multilib spec for GCC to ensure that it will not" &&
	echo " attempt to link against libraries on the host." &&
	for file in $(find gcc/config -name t-linux64) ; do \
		cp -v $file{,.orig}
		sed '/MULTILIB_OSDIRNAMES/d' $file.orig > $file
	done
else
	echo "unknown target '$TGT'"
	exit 1
fi
echo "" &&
mkdir -v ../build-gcc &&
cd ../build-gcc &&
CC="${CROSS_TARGET}-gcc -B${TOOLS}/lib/" \
  AR=${CROSS_TARGET}-ar \
  RANLIB=${CROSS_TARGET}-ranlib \
  ../gcc*/configure \
    --prefix=${TOOLS} \
    --with-local-prefix=${TOOLS} \
    --enable-clocale=gnu \
    --enable-shared \
    --enable-threads=posix \
    --enable-__cxa_atexit \
    --enable-languages=c,c++ \
    --disable-libstdcxx-pch \
    --disable-multilib \
    --disable-bootstrap \
    --disable-libgomp \
    --with-gmp-include=$(pwd)/gmp \
    --with-gmp-lib=$(pwd)/gmp/.libs \
    --without-ppl \
    --without-cloog &&
echo "MAKE ${TOOLS} gcc" &&
make &&
echo "INSTALL ${TOOLS} gcc" &&
make install &&
ln -vs gcc ${TOOLS}/bin/cc &&
echo "ensure compiling and linking" &&
echo 'main(){}' > dummy.c &&
cc dummy.c &&
readelf -l a.out | grep ": ${TOOLS}" &&
rm -v dummy.c a.out &&
echo "YAY ${TOOLS} GCC" || exit $?
echo "YAY libc" || exit $?
popd
echo "CLEANUP GCC"
pwd
rm -rf ${TOOLCHAIN_BUILD}/*
ls -l

popd
echo "WOOT!"

