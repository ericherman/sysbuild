#!/bin/bash
#
# Copyright (C) 2010-2011 Eric Herman
# license: http://www.gnu.org/licenses/lgpl-2.1.html
#
# initially thrown together by Eric Herman on 2010 December 19
#
# much of this is based upon Cross-Compiled Linux From Scratch
#  http://cross-lfs.org/
#   Copyright (C) 2005-2010 Joe Ciccone, Jim Gifford & Ryan Oliver
#   license: http://www.opencontent.org/openpub/
#
# CLFS is/was based upon LFS,
#  http://www.linuxfromscratch.org/lfs/
#   Copyright (C) 1999-2010 Gerard Beekmans
#   license: http://creativecommons.org/licenses/by-nc-sa/2.0/
#
# some inspiration was from DIY Linux
#  http://diy-linux.org/
#   Copyright (C) 2004-2008, 2009 Greg Schafer
#   license: http://www.gnu.org/licenses/fdl.html
#

set -x

if [ 1 -eq 0 ]; then

export CROSS_TARGET="x86_64-unknown-linux-gnu"
export KERNEL_ARCH="ARCH=x86_64"
export BUILD64="-m64"
#export LIBC_CFLAGS='-g -O2'

elif [ 1 -eq 1 ]; then

export CROSS_TARGET='mipsel-unknown-linux-gnu'
export KERNEL_ARCH='ARCH=mips'
export BUILD64=""
#export LIBC_CFLAGS='-g -O2'

else

export CROSS_TARGET="i686-unknown-linux-gnu"
export KERNEL_ARCH="ARCH=i686"
export BUILD64=""
#export LIBC_CFLAGS='-march=i686 -g -O2'

fi

<<END_OF_DOCS
building of the cross-compile tools needs a few variables including
the triplet of the host machine CROSS_HOST, target machine CROSS_TARGET

To account for the possibility that the host and target are the same
  arch, as cross-compiling won't work when host and target are the same,
  part of the host triplet was changed slightly to add 'cross'
END_OF_DOCS
export CROSS_HOST=$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')

PROCS=$(grep -c ^processor /proc/cpuinfo)
JOBS=$(( 2 + $PROCS ))
export MAKEFLAGS="-j $JOBS"

export MIN_KERNEL_VERSION="3.6.0"

cat <<END_OF_MSG
CROSS_TARGET=$CROSS_TARGET
KERNEL_ARCH=$KERNEL_ARCH
BUILD64=$BUILD64
CROSS_HOST=$CROSS_HOST
MIN_KERNEL_VERSION=$MIN_KERNEL_VERSION
MAKEFLAGS=$MAKEFLAGS
END_OF_MSG

LINUX="linux-3.7.1.tar.bz2"
BINUTILS="binutils-2.23.1.tar.bz2"
LIBC="glibc-2.17.tar.xz"
#GCC="gcc-4.7.2.tar.bz2"
#GCC_SPECS_PATCH="gcc-4.7.2-specs-eric-0.patch"
GCC="gcc-4.6.3.tar.bz2"
GCC_SPECS_PATCH="gcc-4.6.3-specs-1.patch"
GCC_BRANCH_UPDATE_PATCH="gcc-4.6.3-branch_update-2.patch"
GCC_MIPS_FIX_PATCH="gcc-4.6.3-mips_fix-1.patch"
#GMP="gmp-5.1.0.tar.xz"
GMP="gmp-5.0.5.tar.xz"
MPFR="mpfr-3.1.1.tar.xz"
MPC="mpc-1.0.1.tar.gz"
PPL="ppl-0.12.1.tar.xz"
CLOOG="cloog-0.16.3.tar.gz"
#CLOOG="cloog-0.17.0.tar.gz"
#LIBC="glibc-2.15.tar.xz"
#LIBC="eglibc-2.13-r13356.tar.bz2"
#LIBC="eglibc-2.12-r12509.tar.bz2"
#CLOOGPPL="cloog-ppl-0.15.11.tar.gz"
#GCC="gcc-4.7.0.tar.bz2"
#GCC_SPECS_PATCH="gcc-4.6.0-pure64_specs-1.patch"
#GCC_SPECS_PATCH="gcc-4.7.0-pure64_specs-_eric_-1.patch"

FILE="file-5.11.tar.gz"
NCURSES="ncurses-5.9.tar.gz"
NCURSES_BASH_FIX="ncurses-5.9-bash_fix-1.patch"
M4="m4-1.4.16.tar.xz"
M4_NO_GETS_PATCH="m4-1.4.16-no-gets-1.patch"

export SYSROOT="/lfs"
export CROSSTOOLS_PREFIX="/cross-tools"
export TOOLS_PREFIX="/tools"
#export TOOLCHAIN_BUILD=/tmp/${USER}/build_toolchain
export TOOLCHAIN_BUILD="/lfs/build"
export SOURCES=/lfs/sources/tarballs
export PATCHES=/lfs/sources/patches
export PATH=${CROSSTOOLS_PREFIX}/bin:${PATH}
export LC_ALL=POSIX
unset CFLAGS
unset CXXFLAGS
set +h
umask 022

# TODO convert to using the full sysroot method and eliminate the need for
#      --prefix=/cross-tools and /tools symlinks in the root directory to the
#      corresponding $SYSROOT directory so a non-root user may build a
#      toolchain entirely in their /home directory or perhaps in /tmp

cat <<END_OF_MSG
CROSS_TARGET=${CROSS_TARGET}
KERNEL_ARCH=$KERNEL_ARCH
BUILD64=$BUILD64
CROSS_HOST=${CROSS_HOST}

LINUX=$LINUX
FILE=$FILE
NCURSES=$NCURSES with $NCURSES_BASH_FIX
GMP=$GMP
MPFR=$MPFR
PPL=$PPL
MPC=$MPC
CLOOG=$CLOOG
BINUTILS=$BINUTILS
LIBC=$LIBC
GCC=$GCC with ${GCC_SPECS_PATCH}

CROSSTOOLS_PREFIX=${CROSSTOOLS_PREFIX}
TOOLS_PREFIX=${TOOLS_PREFIX}
TOOLCHAIN_BUILD=${TOOLCHAIN_BUILD}
SOURCES=${SOURCES}
PATCHES=${PATCHES}
PATH=${PATH}
LC_ALL=${LC_ALL}
END_OF_MSG

<<END_OF_DOCS
SOME helpful links:
 http://gcc.gnu.org/install/prerequisites.html

 http://www.cs.unipr.it/ppl/Download/ftp/releases/0.11/ppl-0.11.tar.bz2
 ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-ppl-0.15.10.tar.gz
 http://www.multiprecision.org/mpc/download/mpc-0.8.2.tar.gz
END_OF_DOCS

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                  CROSSTOOLCHAIN BUILD BEGINS
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

END_OF_MSG
echo "clearing ${CROSSTOOLS_PREFIX} and ${TOOLS_PREFIX} and ${TOOLCHAIN_BUILD}"
install -dv ${SYSROOT}/tools
install -dv ${SYSROOT}/cross-tools
rm -rf ${CROSSTOOLS_PREFIX}/*
rm -rf ${TOOLS_PREFIX}/*
rm -rf ${TOOLCHAIN_BUILD}/*
mkdir -v ${TOOLS_PREFIX}/lib
# ln -sv lib ${TOOLS_PREFIX}/lib64
mkdir -p ${TOOLCHAIN_BUILD}
pushd ${TOOLCHAIN_BUILD}
echo ""
echo "CFLAGS and CXXFLAGS must not be set during the building of cross-tools"
echo "CFLAGS=$CFLAGS";
echo "CXXFLAGS=$CXXFLAGS"
echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Linux-Headers

     $LINUX
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$LINUX &&
pushd linux* &&
install -dv ${TOOLS_PREFIX}/include &&
echo "ensure the kernel source dir is clean" &&
make mrproper &&
echo "sanitize raw kernel headers for use by userspace programs" &&
make $KERNEL_ARCH headers_check &&
echo " ... and install" &&
make ${KERNEL_ARCH} INSTALL_HDR_PATH=dest headers_install &&
cp -rv dest/include/* ${TOOLS_PREFIX}/include &&
echo "YAY Linux-Headers" || exit $?

popd
echo "Linux-Headers removing build dir"
pwd
rm -rf linux*
ls -l

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 FILE
       $FILE
       utility for determining the type of a given file or files.

       TODO: why
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$FILE &&
pushd file* &&
echo "FILE configure" &&
./configure \
  --prefix=${CROSSTOOLS_PREFIX} &&
echo "FILE make" &&
make &&
echo "FILE install" &&
make install &&
echo "FILE YAY" || exit $?

popd
echo "FILE removing build dir"
pwd
rm -rf file*
ls -l

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 M4
       $M4
       The M4 package contains a macro processor.

       TODO: why
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$M4 &&
pushd m4* &&
echo "M4 patch" &&
patch -Np1 -i ${PATCHES}/${M4_NO_GETS_PATCH} &&
echo "M4 configure" &&
./configure \
  --prefix=${CROSSTOOLS_PREFIX} &&
echo "M4 make" &&
make &&
echo "M4 install" &&
make install &&
echo "M4 YAY" || exit $?

popd
echo "M4 removing build dir"
pwd
rm -rf m4*
ls -l


echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 NCURSES (tic)
      $NCURSES
      The Ncurses package contains libraries for terminal-independent
      handling of character screens.
      Only one binary (tic) is needed for the Cross-Tools.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$NCURSES &&
pushd ncurses* &&
echo "NCURSES (tic) patch"
echo "applying ${NCURSES_BASH_FIX}" &&
echo " (which fixes an issue with some Bash versions)" &&
patch -Np1 -i ${PATCHES}/${NCURSES_BASH_FIX} &&
echo "NCURSES (tic) configure" &&
./configure \
  --prefix=${CROSSTOOLS_PREFIX} \
  --without-debug \
  --without-shared &&
echo "NCURSES (tic) make" &&
echo " Build the headers" &&
make -C include &&
echo " Build only tic" &&
make -C progs tic &&
echo "NCURSES (tic) install" &&
install -m755 progs/tic ${CROSSTOOLS_PREFIX}/bin &&
echo "NCURSES (tic) YAY" || exit $?

popd
echo "NCURSES (tic) removing build dir"
pwd
rm -rf ncurses*
ls -l

cat <<END_OF_MESSAGE
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 GMP
     $GMP
     GMP is a library for arithmetic on arbitrary precision integers,
     rational numbers, and floating-point numbers.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MESSAGE

tar xf ${SOURCES}/$GMP &&
pushd gmp* &&
echo "GMP configure" &&
CPPFLAGS=-fexceptions \
 ./configure \
  --prefix=${CROSSTOOLS_PREFIX} \
  --enable-cxx \
  --disable-static &&
echo "GMP make" &&
make &&
echo "GMP install" &&
make install &&
echo "GMP YAY" || exit $?

popd
echo "GMP removing build dir"
pwd
rm -rf gmp*
ls -l

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 MPFR
      $MPFR
      Multiple-Precision Floating-point with correct Rounding
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$MPFR &&
pushd mpfr* &&
#echo "MPFR patch" &&
#echo " now applying mpfr-3.0.0-branch_update-1.patch" &&
#echo "  http://www.mpfr.org/mpfr-current/allpatches" &&
#echo "   grabbed on 2010-12-19" &&
#patch -N -Z -p1 -i ${PATCHES}/mpfr-3.0.0-branch_update-1.patch &&
echo "MPFR configure" &&
LDFLAGS="-Wl,-rpath,${CROSSTOOLS_PREFIX}/lib" \
 ./configure \
    --prefix=${CROSSTOOLS_PREFIX} \
    --enable-shared \
    --disable-static \
    --with-gmp=${CROSSTOOLS_PREFIX} &&
echo "MPFR make" &&
make &&
echo "MPFR install" &&
make install &&
echo "MPFR YAY" || exit $?

popd
echo "MPFR removing build dir"
pwd
rm -rf mpfr*
ls -l

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 MPC
      $MPC
      Mpc is a C library for the arithmetic of complex numbers with
      arbitrarily high precision and correct rounding of the result.
      It is built upon and follows the same principles as Mpfr.

      Because it builds on Mpfr, use the same LDFLAGS as Mpfr?
      (is this correct?)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$MPC &&
pushd mpc* &&
echo "MPC configure" &&
LDFLAGS="-Wl,-rpath,${CROSSTOOLS_PREFIX}/lib" \
 ./configure \
    --prefix=${CROSSTOOLS_PREFIX} \
    --disable-static \
    --with-gmp=${CROSSTOOLS_PREFIX} \
    --with-mpfr=${CROSSTOOLS_PREFIX} &&
echo "MPC make" &&
make &&
echo "MPC install" &&
make install &&
echo "MPC YAY" || exit $?

popd
echo "MPC removing build dir"
pwd
rm -rf mpc*
ls -l


echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 PPL
      $PPL
      Parma Polyhedra Library (required by CLooG)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$PPL &&
pushd ppl* &&
echo "PPL configure" &&
CPPFLAGS="-I${CROSSTOOLS_PREFIX}/include" \
LDFLAGS="-Wl,-rpath,${CROSSTOOLS_PREFIX}/lib" \
 ./configure \
  --prefix=${CROSSTOOLS_PREFIX} \
  --enable-shared \
  --disable-static \
  --enable-interfaces="c,cxx" \
  --disable-optimization \
  --with-gmp=${CROSSTOOLS_PREFIX} &&
echo "PPL make" &&
make &&
echo "PPL install" &&
make install &&
echo "PPL YAY" || exit $?

popd
echo "PPL removing build dir"
pwd
rm -rf ppl*
ls -l

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 CLooG
      $CLOOG
      CLooG is a library to generate code for scanning Z-polyhedra.
      In other words, it finds code that reaches each integral point of
      one or more parameterized polyhedra.

      GCC links with this library in order to enable the new loop
      generation code known as Graphite
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$CLOOG &&
pushd cloog* &&
echo " prevent the configure script from setting LD_LIBRARY_PATH when it" &&
echo " finds PPL, preventing any conflicts with libraries from the host" &&
echo " system" &&
cp -v configure{,.orig} &&
sed -e "/LD_LIBRARY_PATH=/d" configure.orig > configure &&
echo "CLOOG configure diff" || exit $?
diff -u configure.orig configure
echo "CLOOG configure" &&
LDFLAGS="-Wl,-rpath,${CROSSTOOLS_PREFIX}/lib" \
 ./configure \
  --prefix=${CROSSTOOLS_PREFIX} \
  --disable-static \
  --enable-shared \
  --with-gmp-prefix=${CROSSTOOLS_PREFIX} &&
echo "CLOOG make" &&
make &&
echo "CLOOG install" &&
make install &&
echo "CLOOG YAY" || exit $?

popd
echo "CLOOG removing build dir"
pwd
rm -rf cloog*
ls -l

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Cross Binutils
      $BINUTILS
      It is important that Binutils be compiled before libc and GCC
      both (e)Glibc and GCC perform various tests on the available
      linker and assembler to determine which of their own features
      to enable
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$BINUTILS &&
pushd binutils* &&
echo "Binutils documentation recommends building Binutils outside of the" &&
echo "source directory in a dedicated build directory" &&
mkdir -v ../build-binutils &&
cd ../build-binutils &&
pwd &&
echo "BINUTILS configure" &&
AR=ar \
 AS=as \
 ../binutils*/configure \
  --prefix=${CROSSTOOLS_PREFIX} \
  --host=${CROSS_HOST} \
  --target=${CROSS_TARGET} \
  --with-sysroot=${SYSROOT} \
  --with-lib-path=${TOOLS_PREFIX}/lib \
  --disable-nls \
  --enable-shared \
  --disable-static \
  --disable-multilib &&
echo "check host environment for tools to compile Binutils" &&
make configure-host &&
echo "BINUTILS make" &&
make &&
make install &&
echo "BINUTILS install" &&
cp -v ../binutils*/include/libiberty.h ${TOOLS_PREFIX}/include &&
echo "BINUTILS YAY" || exit $?

popd
echo "BINUTILS removing build dir"
pwd
rm -rf binutils* build-binutils
ls -l

echo ""
cat <<END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Cross GCC - Static
      $GCC
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$GCC &&
pushd gcc* &&
echo "GCC static patch" &&
echo "applying ${GCC_BRANCH_UPDATE_PATCH}" &&
patch -Np1 -i ${PATCHES}/${GCC_BRANCH_UPDATE_PATCH} &&
echo "" &&
echo "applying ${GCC_SPECS_PATCH}" &&
patch -Np1 -i ${PATCHES}/${GCC_SPECS_PATCH} &&
echo "" &&
echo "applying ${GCC_MIPS_FIX_PATCH}" &&
patch -Np1 -i ${PATCHES}/${GCC_MIPS_FIX_PATCH} &&
echo "" &&
echo "Change the StartFile Spec and Standard Include Dir" &&
echo " so that GCC looks in ${TOOLS_PREFIX}" &&
cp -v gcc/config/linux.h{,.orig} &&
echo -en '#undef STANDARD_INCLUDE_DIR\n#define STANDARD_INCLUDE_DIR "/tools/include/"\n\n' >> gcc/config/linux.h &&
echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"\n' >> gcc/config/linux.h &&
echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> gcc/config/linux.h &&
echo "GCC static linux.h diff" || exit $?
diff -u gcc/config/linux.h.orig gcc/config/linux.h
echo ""
echo "alter gcc's c preprocessor's default include search path" &&
echo " to use ${TOOLS_PREFIX} only" &&
mv -iv gcc/Makefile.in{,.orig} &&
echo "will now sed" &&
sed -e "s@\(^CROSS_SYSTEM_HEADER_DIR =\).*@\1 /tools/include@g" \
    gcc/Makefile.in.orig > gcc/Makefile.in &&
echo "GCC static Makefile diff" || exit $?
diff -u gcc/Makefile.in.orig gcc/Makefile.in
echo "" &&
echo "create a dummy limits.h so the build will not use the host one" &&
touch ${TOOLS_PREFIX}/include/limits.h &&
echo "" &&
echo "The GCC documentation recommends building GCC outside of the source" &&
echo " directory in a dedicated build directory" &&
mkdir -v ../build-gcc &&
cd ../build-gcc &&
echo "GCC static configure" &&
echo 'do we need?: CPPFLAGS_FOR_TARGET="--sysroot=${SYSROOT}"' &&
echo 'do we need?: LDFLAGS_FOR_TARGET="--sysroot=${SYSROOT}"' &&
echo 'do we need?: "---with-mpc=${CROSSTOOLS_PREFIX}"' &&
AR=ar \
 LDFLAGS="-Wl,-rpath,${CROSSTOOLS_PREFIX}/lib" \
 ../gcc*/configure \
  --prefix=${CROSSTOOLS_PREFIX} \
  --build=${CROSS_HOST} \
  --host=${CROSS_HOST} \
  --target=${CROSS_TARGET} \
  --with-sysroot=${SYSROOT} \
  --with-local-prefix=${TOOLS_PREFIX} \
  --with-mpfr=${CROSSTOOLS_PREFIX} \
  --with-gmp=${CROSSTOOLS_PREFIX} \
  --with-ppl=${CROSSTOOLS_PREFIX} \
  --with-cloog=${CROSSTOOLS_PREFIX} \
  --enable-cloog-backend=isl \
  --enable-languages=c \
  --with-newlib \
  --without-headers \
  --disable-decimal-float \
  --disable-libgomp \
  --disable-libmudflap \
  --disable-libssp \
  --disable-threads \
  --disable-nls \
  --disable-shared \
  --disable-multilib &&
echo "GCC static build" &&
make all-gcc all-target-libgcc &&
echo "GCC static install" &&
make install-gcc install-target-libgcc &&
echo "GCC static YAY" || exit $?

popd
echo "GCC static removing build dir"
pwd
rm -rf gcc* build-gcc
ls -l

echo ""
cat << END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 LIBC
      $LIBC
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$LIBC &&
pushd *libc* &&
echo "LIBC patch" &&
echo "Disable linking to libgcc_eh" &&
cp -v Makeconfig{,.orig} &&
sed -e 's/-lgcc_eh//g' Makeconfig.orig > Makeconfig &&
echo "will now diff" || exit $?
diff -u Makeconfig.orig Makeconfig
echo " building LIBC outside of the source directory" &&
mkdir -v ../build-lib &&
cd ../build-lib &&
echo " added to config.cache for (E)GLIBC to support NPTL" || exit $?
cat > config.cache << "EOF"
libc_cv_forced_unwind=yes
libc_cv_c_cleanup=yes
libc_cv_gnu89_inline=yes
libc_cv_ssp=no
EOF
BUILD_CC="gcc" \
 CC="${CROSS_TARGET}-gcc ${BUILD64}" \
 AR="${CROSS_TARGET}-ar" \
 RANLIB="${CROSS_TARGET}-ranlib" \
 ../*libc*/configure \
  --prefix=${TOOLS_PREFIX} \
  --host=${CROSS_TARGET} \
  --build=${CROSS_HOST} \
  --disable-profile \
  --enable-add-ons \
  --with-tls \
  --enable-kernel=${MIN_KERNEL_VERSION} \
  --with-__thread \
  --with-binutils=${CROSSTOOLS_PREFIX}/bin \
  --with-headers=${TOOLS_PREFIX}/include \
  --cache-file=config.cache &&
echo "LIBC build" &&
make &&
echo "LIBC install" &&
make install inst_vardbdir=${TOOLS_PREFIX}/var/db &&
cp -v ../*libc*/sunrpc/rpc/*.h ${TOOLS_PREFIX}/include/rpc &&
cp -v ../*libc*/sunrpc/rpcsvc/*.h ${TOOLS_PREFIX}/include/rpcsvc &&
cp -v ../*libc*/nis/rpcsvc/*.h ${TOOLS_PREFIX}/include/rpcsvc &&
echo "LIBC YAY" || exit $?

popd
echo "LIBC removing build dir"
pwd
rm -rf *libc* build-lib
ls -l

echo ""
cat << END_OF_MSG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Cross GCC final
      $GCC
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END_OF_MSG
tar xf ${SOURCES}/$GCC &&
pushd gcc* &&
echo "GCC patch" &&

echo "applying ${GCC_BRANCH_UPDATE_PATCH}" &&
patch -Np1 -i ${PATCHES}/${GCC_BRANCH_UPDATE_PATCH} &&
echo "" &&
echo "applying ${GCC_SPECS_PATCH}" &&
patch -Np1 -i ${PATCHES}/${GCC_SPECS_PATCH} &&
echo "" &&
echo "applying ${GCC_MIPS_FIX_PATCH}" &&
patch -Np1 -i ${PATCHES}/${GCC_MIPS_FIX_PATCH} &&
echo "" &&
echo "Change the StartFile Spec and Standard Include Dir so that GCC looks" &&
echo " in ${TOOLS_PREFIX}" &&
cp -v gcc/config/linux.h{,.orig} &&
echo -en '#undef STANDARD_INCLUDE_DIR\n#define STANDARD_INCLUDE_DIR "/tools/include/"\n\n' >> gcc/config/linux.h &&
echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"\n' >> gcc/config/linux.h &&
echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> gcc/config/linux.h &&
echo "GCC linux.h diff" || exit $?
diff -u gcc/config/linux.h.orig gcc/config/linux.h
echo "" &&
echo "alter gcc's c preprocessor's default include search path" &&
echo " to use /tools only" &&
cp -v gcc/Makefile.in{,.orig} &&
sed -e "s@\(^CROSS_SYSTEM_HEADER_DIR =\).*@\1 /tools/include@g" \
    gcc/Makefile.in.orig > gcc/Makefile.in &&
echo "will now diff" || exit $?
diff -u gcc/Makefile.in.orig gcc/Makefile.in
echo "" &&
echo "build GCC in a dedicated build directory" &&
mkdir -v ../build-gcc &&
cd ../build-gcc &&
echo "GCC configure" &&
echo 'do we need?: CPPFLAGS_FOR_TARGET="--sysroot=${SYSROOT}"' &&
echo 'do we need?: LDFLAGS_FOR_TARGET="--sysroot=${SYSROOT}"' &&
echo 'do we need?: "---with-mpc=${CROSSTOOLS_PREFIX}"' &&
AR=ar \
 LDFLAGS="-Wl,-rpath,${CROSSTOOLS_PREFIX}/lib" \
 ../gcc*/configure \
  --prefix=${CROSSTOOLS_PREFIX} \
  --build=${CROSS_HOST} \
  --target=${CROSS_TARGET} \
  --host=${CROSS_HOST} \
  --with-sysroot=${SYSROOT} \
  --with-local-prefix=${TOOLS_PREFIX} \
  --with-mpfr=${CROSSTOOLS_PREFIX} \
  --with-gmp=${CROSSTOOLS_PREFIX} \
  --with-ppl=${CROSSTOOLS_PREFIX} \
  --with-cloog=${CROSSTOOLS_PREFIX} \
  --enable-cloog-backend=isl \
  --disable-nls \
  --enable-shared \
  --enable-languages=c,c++ \
  --enable-__cxa_atexit \
  --enable-c99 \
  --enable-long-long \
  --enable-threads=posix \
  --disable-static \
  --disable-multilib &&
echo "GCC make" &&
make AS_FOR_TARGET="${CROSS_TARGET}-as" \
    LD_FOR_TARGET="${CROSS_TARGET}-ld" &&
echo "GCC install" &&
make install &&
echo "GCC YAY" || exit $?

popd
echo "GCC removing build dir"
pwd
rm -rf gcc* build-gcc
ls -l

popd
echo "WOOT!"

